.PHONY: test test-unit test-integration test-user-integration clean build run docker-build setup-system-tests setup-monitoring start-monitoring start-prometheus-stack start-elk-stack stop-monitoring clean-monitoring check-monitoring-health logs-prometheus logs-grafana logs-loki logs-elasticsearch logs-kibana start-dev-full stop-dev-full clean-dev-full start-dev-light

BINARY_NAME=user-service
DOCKER_IMAGE=pinstack-user-service:latest
GO_VERSION=1.24.2
SYSTEM_TESTS_DIR=../pinstack-system-tests
SYSTEM_TESTS_REPO=https://github.com/Soloda1/pinstack-system-tests.git
MONITORING_DIR=../pinstack-monitoring-service
MONITORING_REPO=https://github.com/Soloda1/pinstack-monitoring-service.git

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Go
check-go-version:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Go..."
	@go version | grep -q "go$(GO_VERSION)" || (echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Go $(GO_VERSION)" && exit 1)
	@echo "‚úÖ Go $(GO_VERSION) –Ω–∞–π–¥–µ–Ω"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ monitoring —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup-monitoring:
	@echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ monitoring —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	@if [ ! -d "$(MONITORING_DIR)" ]; then \
		echo "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ pinstack-monitoring-service..."; \
		git clone $(MONITORING_REPO) $(MONITORING_DIR); \
	else \
		echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pinstack-monitoring-service..."; \
		cd $(MONITORING_DIR) && git pull origin main; \
	fi
	@echo "‚úÖ Monitoring –≥–æ—Ç–æ–≤"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ system tests —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup-system-tests:
	@echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ system tests —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	@if [ ! -d "$(SYSTEM_TESTS_DIR)" ]; then \
		echo "üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ pinstack-system-tests..."; \
		git clone $(SYSTEM_TESTS_REPO) $(SYSTEM_TESTS_DIR); \
	else \
		echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pinstack-system-tests..."; \
		cd $(SYSTEM_TESTS_DIR) && git pull origin main; \
	fi
	@echo "‚úÖ System tests –≥–æ—Ç–æ–≤—ã"

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
fmt: check-go-version
	gofmt -s -w .
	go fmt ./...

lint: check-go-version
	go vet ./...
	golangci-lint run

# –Æ–Ω–∏—Ç —Ç–µ—Å—Ç—ã
test-unit: check-go-version
	go test -v -count=1 -race -coverprofile=coverage.txt ./...

# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ docker-compose
start-user-infrastructure: setup-system-tests
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π..."
	@docker network create pinstack 2>/dev/null || true
	@docker network create pinstack-test 2>/dev/null || true
	cd $(SYSTEM_TESTS_DIR) && \
	USER_SERVICE_CONTEXT=../pinstack-user-service docker compose -f docker-compose.test.yml up -d \
		user-db-test \
		user-migrator-test \
		user-service-test \
		auth-db-test \
		auth-migrator-test \
		auth-service-test \
		api-gateway-test \
		redis
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check-services:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@docker exec pinstack-user-db-test pg_isready -U postgres || (echo "‚ùå User –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@docker exec pinstack-auth-db-test pg_isready -U postgres || (echo "‚ùå Auth –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞" && exit 1)
	@timeout 30 bash -c 'until docker exec pinstack-redis-test redis-cli ping | grep -q PONG; do echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Redis..."; sleep 2; done' || (echo "‚ùå Redis –Ω–µ –≥–æ—Ç–æ–≤" && exit 1)
	@echo "‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis –≥–æ—Ç–æ–≤—ã"
	@echo "=== User Service logs ==="
	@docker logs pinstack-user-service-test --tail=10
	@echo "=== Auth Service logs ==="
	@docker logs pinstack-auth-service-test --tail=10
	@echo "=== API Gateway logs ==="
	@docker logs pinstack-api-gateway-test --tail=10
	@echo "=== Redis logs ==="
	@docker logs pinstack-redis-test --tail=5

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è user service
test-user-integration: check-services
	@echo "üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è User Service..."
	cd $(SYSTEM_TESTS_DIR) && \
	go test -v -count=1 -timeout=10m ./internal/scenarios/integration/gateway_user/...

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop-user-infrastructure:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml stop \
		api-gateway-test \
		auth-service-test \
		auth-migrator-test \
		auth-db-test \
		user-service-test \
		user-migrator-test \
		user-db-test \
		redis
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml rm -f \
		api-gateway-test \
		auth-service-test \
		auth-migrator-test \
		auth-db-test \
		user-service-test \
		user-migrator-test \
		user-db-test \
		redis

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è volumes)
clean-user-infrastructure:
	@echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml down -v
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, –æ–±—Ä–∞–∑–æ–≤ –∏ volumes..."
	docker container prune -f
	docker image prune -a -f
	docker volume prune -f
	docker network prune -f
	@echo "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–æ–ª–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (—Å –æ—á–∏—Å—Ç–∫–æ–π)
test-integration: start-user-infrastructure test-user-integration stop-user-infrastructure

# –í—Å–µ —Ç–µ—Å—Ç—ã
test-all: fmt lint test-unit test-integration

# –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
logs-user:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f user-service-test

logs-auth:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f auth-service-test

logs-gateway:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f api-gateway-test

logs-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f user-db-test

logs-auth-db:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f auth-db-test

logs-redis:
	cd $(SYSTEM_TESTS_DIR) && \
	docker compose -f docker-compose.test.yml logs -f redis

# Redis —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
redis-cli:
	@echo "üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis CLI..."
	docker exec -it pinstack-redis-test redis-cli

redis-info:
	@echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis..."
	docker exec pinstack-redis-test redis-cli info

redis-keys:
	@echo "üîë –í—Å–µ –∫–ª—é—á–∏ –≤ Redis..."
	docker exec pinstack-redis-test redis-cli keys "*"

redis-flush:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Redis..."
	@read -p "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ Redis? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	docker exec pinstack-redis-test redis-cli flushall
	@echo "‚úÖ Redis –æ—á–∏—â–µ–Ω"

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º user-service
quick-test-local: setup-system-tests
	@echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º user-service..."
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π..."
	@docker network create pinstack 2>/dev/null || true
	@docker network create pinstack-test 2>/dev/null || true
	cd $(SYSTEM_TESTS_DIR) && \
	USER_SERVICE_CONTEXT=../pinstack-user-service docker compose -f docker-compose.test.yml up -d \
		user-db-test user-migrator-test user-service-test \
		auth-db-test auth-migrator-test auth-service-test \
		api-gateway-test redis
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 30
	@timeout 30 bash -c 'until docker exec pinstack-redis-test redis-cli ping | grep -q PONG; do echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Redis..."; sleep 2; done'
	cd $(SYSTEM_TESTS_DIR) && \
	go test -v -count=1 -timeout=5m ./internal/scenarios/integration/gateway_user/...
	$(MAKE) stop-user-infrastructure

# –û—á–∏—Å—Ç–∫–∞
clean: clean-user-infrastructure
	go clean
	rm -f $(BINARY_NAME)
	@echo "üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker —Å–∏—Å—Ç–µ–º—ã..."
	docker system prune -a -f --volumes
	@echo "‚úÖ –í—Å—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
clean-docker-force:
	@echo "üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê DOCKER..."
	@echo "‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, volumes –∏ —Å–µ—Ç–∏!"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	docker stop $$(docker ps -aq) 2>/dev/null || true
	docker rm $$(docker ps -aq) 2>/dev/null || true
	docker rmi $$(docker images -q) 2>/dev/null || true
	docker volume rm $$(docker volume ls -q) 2>/dev/null || true
	docker network rm $$(docker network ls -q) 2>/dev/null || true
	docker system prune -a -f --volumes
	@echo "üí• –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# CI –ª–æ–∫–∞–ª—å–Ω–æ (–∏–º–∏—Ç–∞—Ü–∏—è GitHub Actions)
ci-local: test-all
	@echo "üéâ –õ–æ–∫–∞–ª—å–Ω—ã–π CI –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (—Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)
quick-test: start-user-infrastructure
	@echo "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏..."
	cd $(SYSTEM_TESTS_DIR) && \
	go test -v -count=1 -timeout=5m ./internal/scenarios/integration/gateway_user/...
	$(MAKE) stop-user-infrastructure

######################
# Monitoring Stack   #
######################

# –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ monitoring stack
start-monitoring: setup-monitoring
	@echo "üìä –ó–∞–ø—É—Å–∫ monitoring stack..."
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π..."
	@docker network create pinstack 2>/dev/null || true
	@docker network create pinstack-test 2>/dev/null || true
	cd $(MONITORING_DIR) && \
	docker compose up -d
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ monitoring —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 15
	@echo "‚úÖ Monitoring stack –∑–∞–ø—É—â–µ–Ω:"
	@echo "  üìä Prometheus: http://localhost:9090"
	@echo "  üìà Grafana: http://localhost:3000 (admin/admin)"
	@echo "  üîç Loki: http://localhost:3100"
	@echo "  üìã Kibana: http://localhost:5601"
	@echo "  üíæ Elasticsearch: http://localhost:9200"
	@echo "  üêß PgAdmin: http://localhost:5050 (admin@admin.com/admin)"
	@echo "  üêõ Kafka UI: http://localhost:9091"

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ Prometheus stack (Prometheus + Grafana + Loki)
start-prometheus-stack: setup-monitoring
	@echo "üìä –ó–∞–ø—É—Å–∫ Prometheus stack..."
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π..."
	@docker network create pinstack 2>/dev/null || true
	@docker network create pinstack-test 2>/dev/null || true
	cd $(MONITORING_DIR) && \
	docker compose up -d prometheus grafana loki promtail
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Prometheus stack..."
	@sleep 10
	@echo "‚úÖ Prometheus stack –∑–∞–ø—É—â–µ–Ω:"
	@echo "  üìä Prometheus: http://localhost:9090"
	@echo "  üìà Grafana: http://localhost:3000 (admin/admin)"
	@echo "  üîç Loki: http://localhost:3100"

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ ELK stack
start-elk-stack: setup-monitoring
	@echo "üìä –ó–∞–ø—É—Å–∫ ELK stack..."
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–µ–π..."
	@docker network create pinstack 2>/dev/null || true
	@docker network create pinstack-test 2>/dev/null || true
	cd $(MONITORING_DIR) && \
	docker compose up -d elasticsearch logstash kibana filebeat
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ELK stack..."
	@sleep 30
	@echo "‚úÖ ELK stack –∑–∞–ø—É—â–µ–Ω:"
	@echo "  üìã Kibana: http://localhost:5601"
	@echo "  üíæ Elasticsearch: http://localhost:9200"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è monitoring —Å–µ—Ä–≤–∏—Å–æ–≤
check-monitoring-health:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è monitoring —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@echo "Prometheus:" && curl -s http://localhost:9090/-/healthy | head -1 || echo "‚ùå Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "Grafana:" && curl -s http://localhost:3000/api/health | head -1 || echo "‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	@echo "Loki:" && curl -s http://localhost:3100/ready | head -1 || echo "‚ùå Loki –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "Elasticsearch:" && curl -s http://localhost:9200/_cluster/health | head -1 || echo "‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
	@echo "Kibana:" && curl -s http://localhost:5601/api/status | head -1 || echo "‚ùå Kibana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ monitoring stack
stop-monitoring:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ monitoring stack..."
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose stop; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ monitoring stack
clean-monitoring:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ monitoring stack..."
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose down -v; \
		echo "üßπ –û—á–∏—Å—Ç–∫–∞ monitoring volumes..."; \
		docker volume rm pinstack-monitoring-service_elasticsearch_data 2>/dev/null || true; \
		docker volume rm pinstack-monitoring-service_filebeat_data 2>/dev/null || true; \
		echo "‚úÖ Monitoring stack –æ—á–∏—â–µ–Ω"; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

# –õ–æ–≥–∏ monitoring —Å–µ—Ä–≤–∏—Å–æ–≤
logs-prometheus:
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose logs -f prometheus; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

logs-grafana:
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose logs -f grafana; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

logs-loki:
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose logs -f loki; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

logs-elasticsearch:
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose logs -f elasticsearch; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

logs-kibana:
	@if [ -d "$(MONITORING_DIR)" ]; then \
		cd $(MONITORING_DIR) && docker compose logs -f kibana; \
	else \
		echo "‚ö†Ô∏è  Monitoring –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"; \
	fi

# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

# –ü–æ–ª–Ω—ã–π development environment —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
start-dev-full: setup-monitoring start-monitoring start-user-infrastructure
	@echo "üöÄ –ü–æ–ª–Ω–∞—è dev —Å—Ä–µ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
	@echo ""
	@echo "=== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==="
	@echo "  üîó API Gateway: http://localhost:8080"
	@echo "  üë§ User Service: http://localhost:8081"
	@echo "  üîê Auth Service: http://localhost:8082"
	@echo ""
	@echo "=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ==="
	@echo "  üìä Prometheus: http://localhost:9090"
	@echo "  üìà Grafana: http://localhost:3000 (admin/admin)"
	@echo "  üîç Loki: http://localhost:3100"
	@echo "  üìã Kibana: http://localhost:5601"
	@echo ""
	@echo "=== –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ==="
	@echo "  üêß PgAdmin: http://localhost:5050 (admin@admin.com/admin)"
	@echo "  üî¥ Redis: localhost:6379"
	@echo "  üêõ Kafka UI: http://localhost:9091"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π dev —Å—Ä–µ–¥—ã
stop-dev-full: stop-monitoring stop-user-infrastructure
	@echo "üõë –ü–æ–ª–Ω–∞—è dev —Å—Ä–µ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π dev —Å—Ä–µ–¥—ã
clean-dev-full: clean-monitoring clean-user-infrastructure
	@echo "üßπ –ü–æ–ª–Ω–∞—è dev —Å—Ä–µ–¥–∞ –æ—á–∏—â–µ–Ω–∞"

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Å Prometheus stack (–±–µ–∑ ELK)
start-dev-light: setup-monitoring start-prometheus-stack start-user-infrastructure
	@echo "üöÄ –õ–µ–≥–∫–∞—è dev —Å—Ä–µ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ (–±–µ–∑ ELK stack)!"
	@echo ""
	@echo "=== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==="
	@echo "  üîó API Gateway"
	@echo "  üë§ User Service"
	@echo "  üîê Auth Service"
	@echo ""
	@echo "=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ==="
	@echo "  üìä Prometheus: http://localhost:9090"
	@echo "  üìà Grafana: http://localhost:3000 (admin/admin)"
	@echo "  üîç Loki: http://localhost:3100"
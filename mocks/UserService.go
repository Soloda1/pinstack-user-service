// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "pinstack-user-service/internal/domain/models"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserService) Create(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *UserService_Expecter) Create(ctx interface{}, user interface{}) *UserService_Create_Call {
	return &UserService_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *UserService_Create_Call) Run(run func(ctx context.Context, user *models.User)) *UserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *UserService_Create_Call) Return(_a0 *models.User, _a1 error) *UserService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Create_Call) RunAndReturn(run func(context.Context, *models.User) (*models.User, error)) *UserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserService) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserService_Expecter) Delete(ctx interface{}, id interface{}) *UserService_Delete_Call {
	return &UserService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *UserService_Delete_Call) Run(run func(ctx context.Context, id int64)) *UserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserService_Delete_Call) Return(_a0 error) *UserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *UserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *UserService) Get(ctx context.Context, id int64) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *UserService_Expecter) Get(ctx interface{}, id interface{}) *UserService_Get_Call {
	return &UserService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *UserService_Get_Call) Run(run func(ctx context.Context, id int64)) *UserService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserService_Get_Call) Return(_a0 *models.User, _a1 error) *UserService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Get_Call) RunAndReturn(run func(context.Context, int64) (*models.User, error)) *UserService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserService) GetByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserService_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserService_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserService_GetByEmail_Call {
	return &UserService_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserService_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserService_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetByEmail_Call) Return(_a0 *models.User, _a1 error) *UserService_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserService_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserService) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type UserService_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserService_Expecter) GetByUsername(ctx interface{}, username interface{}) *UserService_GetByUsername_Call {
	return &UserService_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *UserService_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *UserService_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetByUsername_Call) Return(_a0 *models.User, _a1 error) *UserService_GetByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetByUsername_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserService_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, query, page, limit
func (_m *UserService) Search(ctx context.Context, query string, page int, limit int) ([]*models.User, int, error) {
	ret := _m.Called(ctx, query, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*models.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.User, int, error)); ok {
		return rf(ctx, query, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.User); ok {
		r0 = rf(ctx, query, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, query, page, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, query, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type UserService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - page int
//   - limit int
func (_e *UserService_Expecter) Search(ctx interface{}, query interface{}, page interface{}, limit interface{}) *UserService_Search_Call {
	return &UserService_Search_Call{Call: _e.mock.On("Search", ctx, query, page, limit)}
}

func (_c *UserService_Search_Call) Run(run func(ctx context.Context, query string, page int, limit int)) *UserService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *UserService_Search_Call) Return(_a0 []*models.User, _a1 int, _a2 error) *UserService_Search_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserService_Search_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*models.User, int, error)) *UserService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserService) Update(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *UserService_Expecter) Update(ctx interface{}, user interface{}) *UserService_Update_Call {
	return &UserService_Update_Call{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *UserService_Update_Call) Run(run func(ctx context.Context, user *models.User)) *UserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *UserService_Update_Call) Return(_a0 *models.User, _a1 error) *UserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_Update_Call) RunAndReturn(run func(context.Context, *models.User) (*models.User, error)) *UserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAvatar provides a mock function with given fields: ctx, id, avatarURL
func (_m *UserService) UpdateAvatar(ctx context.Context, id int64, avatarURL string) error {
	ret := _m.Called(ctx, id, avatarURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, avatarURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateAvatar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAvatar'
type UserService_UpdateAvatar_Call struct {
	*mock.Call
}

// UpdateAvatar is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - avatarURL string
func (_e *UserService_Expecter) UpdateAvatar(ctx interface{}, id interface{}, avatarURL interface{}) *UserService_UpdateAvatar_Call {
	return &UserService_UpdateAvatar_Call{Call: _e.mock.On("UpdateAvatar", ctx, id, avatarURL)}
}

func (_c *UserService_UpdateAvatar_Call) Run(run func(ctx context.Context, id int64, avatarURL string)) *UserService_UpdateAvatar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *UserService_UpdateAvatar_Call) Return(_a0 error) *UserService_UpdateAvatar_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdateAvatar_Call) RunAndReturn(run func(context.Context, int64, string) error) *UserService_UpdateAvatar_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePassword provides a mock function with given fields: ctx, id, oldPassword, newPassword
func (_m *UserService) UpdatePassword(ctx context.Context, id int64, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, id, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, id, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdatePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePassword'
type UserService_UpdatePassword_Call struct {
	*mock.Call
}

// UpdatePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - oldPassword string
//   - newPassword string
func (_e *UserService_Expecter) UpdatePassword(ctx interface{}, id interface{}, oldPassword interface{}, newPassword interface{}) *UserService_UpdatePassword_Call {
	return &UserService_UpdatePassword_Call{Call: _e.mock.On("UpdatePassword", ctx, id, oldPassword, newPassword)}
}

func (_c *UserService_UpdatePassword_Call) Run(run func(ctx context.Context, id int64, oldPassword string, newPassword string)) *UserService_UpdatePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserService_UpdatePassword_Call) Return(_a0 error) *UserService_UpdatePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_UpdatePassword_Call) RunAndReturn(run func(context.Context, int64, string, string) error) *UserService_UpdatePassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
